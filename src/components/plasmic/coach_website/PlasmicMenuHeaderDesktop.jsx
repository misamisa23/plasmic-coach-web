// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uu5v5CefeBFWJ3g58RuWZW
// Component: RhmfQLZ342T
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: i2u7Uturkgt/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { useScreenVariants as useScreenVariantsaAzWhvm6PjSv1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aAzWHVM6PJSv1/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_coach_website.module.css"; // plasmic-import: uu5v5CefeBFWJ3g58RuWZW/projectcss
import sty from "./PlasmicMenuHeaderDesktop.module.css"; // plasmic-import: RhmfQLZ342T/css
import coachlogoBlacksvgZ3Py0Ikf4 from "./images/coachlogoBlacksvg.svg"; // plasmic-import: Z3Py0ikf4/picture
import icons8Menusvg9TKQ8Sy from "./images/icons8Menusvg.svg"; // plasmic-import: 9tK_q8Sy_/picture

export const PlasmicMenuHeaderDesktop__VariantProps = new Array();

export const PlasmicMenuHeaderDesktop__ArgProps = new Array();

function PlasmicMenuHeaderDesktop__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaAzWhvm6PjSv1()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__u8Yv1)}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.column__eklhN)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__krSpk)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__m7H1L)}
                        displayHeight={"39px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"123px"}
                        src={{
                          src: coachlogoBlacksvgZ3Py0Ikf4,
                          fullWidth: 300,
                          fullHeight: 99,
                          aspectRatio: 3.02439
                        }}
                      />
                    ) : null}

                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p3ZTa
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__eYzpA
                          )}
                        >
                          {"Sign up"}
                        </button>

                        {true ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__z6Ldp
                            )}
                            color={"clear"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uXt31
                              )}
                            >
                              {"Log in"}
                            </div>
                          </Button>
                        ) : null}
                      </div>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.column__qeunp)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tyGcR)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__mwCo7
                      )}
                    >
                      {"SIGN IN"}
                    </button>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hOJf
                      )}
                    >
                      {"or"}
                    </div>

                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__rCqCq
                      )}
                    >
                      {"REQUEST ACCESS"}
                    </button>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <a
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                href={"#"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__crzKm)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: coachlogoBlacksvgZ3Py0Ikf4,
                    fullWidth: 300,
                    fullHeight: 99,
                    aspectRatio: 3.02439
                  }}
                />
              </a>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__vfW7I)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___3BRu9
                  )}
                  href={"/"}
                >
                  {"Home"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jcKpe
                  )}
                  href={"/"}
                >
                  {"About"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xdEk
                  )}
                  href={"/"}
                >
                  {"Contact"}
                </a>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                data-plasmic-name={"hamburgerMenu"}
                data-plasmic-override={overrides.hamburgerMenu}
                alt={""}
                className={classNames(sty.hamburgerMenu)}
                displayHeight={"25px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"25px"}
                src={{
                  src: icons8Menusvg9TKQ8Sy,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            }
            responsiveBreakpoint={768}
          />
        ) : null}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "navigationBar", "link", "hamburgerMenu"],
  columns: ["columns"],
  navigationBar: ["navigationBar", "link", "hamburgerMenu"],
  link: ["link"],
  hamburgerMenu: ["hamburgerMenu"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenuHeaderDesktop__ArgProps,
          internalVariantPropNames: PlasmicMenuHeaderDesktop__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicMenuHeaderDesktop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuHeaderDesktop";
  } else {
    func.displayName = `PlasmicMenuHeaderDesktop.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuHeaderDesktop = Object.assign(
  // Top-level PlasmicMenuHeaderDesktop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    hamburgerMenu: makeNodeComponent("hamburgerMenu"),
    // Metadata about props expected for PlasmicMenuHeaderDesktop
    internalVariantProps: PlasmicMenuHeaderDesktop__VariantProps,
    internalArgProps: PlasmicMenuHeaderDesktop__ArgProps
  }
);

export default PlasmicMenuHeaderDesktop;
/* prettier-ignore-end */
