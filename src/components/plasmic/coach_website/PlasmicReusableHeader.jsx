// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uu5v5CefeBFWJ3g58RuWZW
// Component: OcmELIHcZf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Header } from "components/Header/Header"; // plasmic-import: uaRmXpnJcl/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import sty from "./PlasmicReusableHeader.module.css"; // plasmic-import: OcmELIHcZf/css

export const PlasmicReusableHeader__VariantProps = new Array();

export const PlasmicReusableHeader__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicReusableHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <Header
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      data={[
        {
          itemTitle: "Product",
          subMenuItems: [
            {
              itemTitle: "Coach Platform",
              items: [
                { title: "Mobile app - for employees", link: "/features" },
                { title: "Admin panel - for managers", link: "/features" }
              ]
            }
          ]
        },
        {
          itemTitle: "How Coach helps",
          subMenuItems: [
            {
              itemTitle: "By industry",
              items: [
                {
                  title: "Consumer Electronics",
                  link: "/industry-consumer-electronics"
                },
                { title: "Manufacturing", link: "/industry-manufacturing" },
                {
                  title: "Telecommunications",
                  link: "/industry-telecommunication"
                },
                { title: "Pharmaceuticals", link: "/industry-pharmaceuticals" },
                { title: "Luxury Goods", link: "/industry-luxury-goods" }
              ]
            }
          ]
        },
        {
          itemTitle: "Who it's for",
          subMenuItems: [
            {
              itemTitle: "Target groups",
              items: [
                {
                  title: "For Managers (L&D, HR, People)",
                  link: "/who-is-it-for-managers"
                },
                { title: "For Employees", link: "/who-is-it-for-employees" },
                { title: "For CEOs", link: "/who-is-it-for-ceos" },
                {
                  title: "For Instructional Designers",
                  link: "/who-is-it-for-instructional-designers"
                }
              ]
            }
          ]
        },
        { itemTitle: "About Us", link: "/about-us" }
      ]}
      isDark={false}
    />
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicReusableHeader__ArgProps,
          internalVariantPropNames: PlasmicReusableHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicReusableHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReusableHeader";
  } else {
    func.displayName = `PlasmicReusableHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicReusableHeader = Object.assign(
  // Top-level PlasmicReusableHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicReusableHeader
    internalVariantProps: PlasmicReusableHeader__VariantProps,
    internalArgProps: PlasmicReusableHeader__ArgProps
  }
);

export default PlasmicReusableHeader;
/* prettier-ignore-end */
