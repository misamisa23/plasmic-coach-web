// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uu5v5CefeBFWJ3g58RuWZW
// Component: 0UCZXj9Zumd
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsaAzWhvm6PjSv1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aAzWHVM6PJSv1/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_coach_website.module.css"; // plasmic-import: uu5v5CefeBFWJ3g58RuWZW/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: 0UCZXj9Zumd/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: SlK3sDjyJ9j/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: y1mSuDyPtw9/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: _6WWMFT1FeI/icon
import coachlogoBlacksvgZ3Py0Ikf4 from "./images/coachlogoBlacksvg.svg"; // plasmic-import: Z3Py0ikf4/picture
import appStoreI1SvgLi4XsSx9I from "./images/appStoreI1Svg.svg"; // plasmic-import: li4XsSX9I/picture
import googlePlayI1SvgLcZljj7H3 from "./images/googlePlayI1Svg.svg"; // plasmic-import: LCZljj7H3/picture

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaAzWhvm6PjSv1()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__rFfq1)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5UfcT)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__gizOb)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"130px"}
              src={{
                src: coachlogoBlacksvgZ3Py0Ikf4,
                fullWidth: 300,
                fullHeight: 99,
                aspectRatio: 3.02439
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7VHy
              )}
            >
              {
                "Coach helps you create and deliver\npersonalized reinforcement training, fast."
              }
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xCnOs
              )}
            >
              {"GET OUR APP"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__faLEs)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__evmsG)}
                displayHeight={"46px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"130px"}
                loading={"lazy"}
                src={{
                  src: appStoreI1SvgLi4XsSx9I,
                  fullWidth: 300,
                  fullHeight: 105,
                  aspectRatio: 2.869565
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__kUoz7)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"146px"}
                loading={"lazy"}
                src={{
                  src: googlePlayI1SvgLcZljj7H3,
                  fullWidth: 300,
                  fullHeight: 94,
                  aspectRatio: 3.195652
                }}
              />
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pA)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nFP
                )}
              >
                {"FOLLOW US"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ir31E)}
              >
                <Icon3Icon
                  className={classNames(projectcss.all, sty.svg__yKxZ)}
                  role={"img"}
                />

                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__oaInP)}
                  role={"img"}
                />

                <Icon28Icon
                  className={classNames(projectcss.all, sty.svg__dWhCk)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__jDvn6)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oMc2I)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4E5Ct
              )}
            >
              {"Product"}
            </div>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column___9ExuQ)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8EhbN)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yHv3L
              )}
            >
              {"INDUSTRIES"}
            </div>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column___7CksW)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eBp3J)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cLxQk
              )}
            >
              {"Company"}
            </div>
          </p.Stack>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
