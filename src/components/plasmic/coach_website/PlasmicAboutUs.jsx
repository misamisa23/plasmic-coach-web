// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uu5v5CefeBFWJ3g58RuWZW
// Component: BXPGlJBTJGj
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ReusableHeader from "../../ReusableHeader"; // plasmic-import: OcmELIHcZf/component
import Footer from "../../Footer"; // plasmic-import: 0UCZXj9Zumd/component
import { useScreenVariants as useScreenVariantsaAzWhvm6PjSv1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aAzWHVM6PJSv1/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_coach_website.module.css"; // plasmic-import: uu5v5CefeBFWJ3g58RuWZW/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: BXPGlJBTJGj/css
import group937Svg2IgFnzRrg from "./images/group937Svg.svg"; // plasmic-import: 2IgFnzRrg/picture
import frame910JpgJ81OyBp4Q from "./images/frame910Jpg.jpeg"; // plasmic-import: j81oyBP4Q/picture
import frame909JpgEFUNZso from "./images/frame909Jpg.jpeg"; // plasmic-import: e_fU-nZso/picture
import frame908JpgI2W0HOkea from "./images/frame908Jpg.jpeg"; // plasmic-import: i2W0HOkea/picture
import buttonCaretWhitesvg2S5Jbv6HmTb from "./images/buttonCaretWhitesvg2.svg"; // plasmic-import: S5jbv6HmTb/picture

export const PlasmicAboutUs__VariantProps = new Array();

export const PlasmicAboutUs__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAboutUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaAzWhvm6PjSv1()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pcY23)} />

          <ReusableHeader
            data-plasmic-name={"reusableHeader"}
            data-plasmic-override={overrides.reusableHeader}
            className={classNames("__wab_instance", sty.reusableHeader)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            hasGap={true}
            className={classNames(projectcss.all, sty.section1)}
          >
            <div className={classNames(projectcss.all, sty.columns__mreRl)}>
              <div className={classNames(projectcss.all, sty.column___0Ic6W)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rvGe3)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___62WhD
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aJ7Hz
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>

                          {
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__fci11
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {"Our mission is to "}
                                </React.Fragment>

                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#3E7CB1" }}
                                >
                                  {"revolutionize"}
                                </span>

                                <React.Fragment>
                                  {" the way companies "}
                                </React.Fragment>

                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#3E7CB1" }}
                                >
                                  {"train their employees."}
                                </span>
                              </React.Fragment>
                            </h1>
                          }

                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__aqPtq)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zoqxp)}
                  />
                ) : null}
              </div>
            </div>
          </p.Stack>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__glAfq)} />
          ) : null}

          <div
            data-plasmic-name={"ctaBlog2"}
            data-plasmic-override={overrides.ctaBlog2}
            className={classNames(projectcss.all, sty.ctaBlog2)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fCzRx)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "231px"
                    : "263px"
                }
                loading={"lazy"}
                src={{
                  src: group937Svg2IgFnzRrg,
                  fullWidth: 300,
                  fullHeight: 74,
                  aspectRatio: 4.078652
                }}
              />
            ) : null}

            <div className={classNames(projectcss.all, sty.columns__yxfcH)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column___6S4PJ)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__iFwkQ
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Our journey started in 2018 when we partnered with top names in the automotive industry -Maserati and Mercedes, to enhance and digitalize their employee training processes. \n\nWe saw firsthand that even big names in the industry struggled to effectively assess their employees' knowledge and the traditional training methods of attending seminars and assessments were inefficient, boring and often resulted in knowledge gaps.\n\nWith this realization, we set out to create a solution that would address these challenges and deliver results that drive success. \n\nThe result was Coach, a platform designed to detect knowledge gaps and continuously improve employee performance.\nOur platform transforms learning from a one-time event into a continuous process, providing real-time insights into employee performance and improving overall organizational efficiency.\n\nAt Konceptiva, we are dedicated to helping companies solve their employee training challenges and deliver exceptional results."
                    : "Our journey started in 2018 when we partnered with top names in the automotive industry -Maserati and Mercedes, to enhance and digitalize their employee training processes. \n\nWe saw firsthand that even big names in the industry struggled to effectively assess their employees' knowledge and the traditional training methods of attending seminars and assessments were inefficient, boring and often resulted in knowledge gaps.\n\nWith this realization, we set out to create a solution that would address these challenges and deliver results that drive success. \n\nThe result was Coach, a platform designed to detect knowledge gaps and continuously improve employee performance.\nOur platform transforms learning from a one-time event into a continuous process, providing real-time insights into employee performance and improving overall organizational efficiency.\n\nAt Konceptiva, we are dedicated to helping companies solve their employee training challenges and deliver exceptional results."}
                </h1>
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section11"}
                data-plasmic-override={overrides.section11}
                hasGap={true}
                className={classNames(projectcss.all, sty.section11)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__tMwCu
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Our latest \n"}</React.Fragment>

                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"news and resources"}
                    </span>
                  </React.Fragment>
                </h1>

                <div
                  className={classNames(projectcss.all, sty.freeBox__qXo22)}
                />
              </p.Stack>
            ) : null}

            {true ? (
              <div className={classNames(projectcss.all, sty.columns__nhvw5)}>
                <div className={classNames(projectcss.all, sty.column__pfvQd)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ynNa)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__sNsKl)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: frame910JpgJ81OyBp4Q,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ozqOj
                      )}
                    >
                      {"PRESS ARTICLE"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pAtZa
                      )}
                    >
                      {"Konceptiva: startup of the month January ’22!"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__gkCgt)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__stNNl)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__h8Rqd)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: frame909JpgEFUNZso,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fvLoL
                      )}
                    >
                      {"EVENT"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vkfmV
                      )}
                    >
                      {"Gamification of Corporate\nTraining - #Session1"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__pfSnt)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__erDC)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ckmky)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: frame908JpgI2W0HOkea,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sxBwz
                      )}
                    >
                      {"BLOG"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i8PoC
                      )}
                    >
                      {"Here are 5 tips for creating\nan effective course"}
                    </div>
                  </p.Stack>
                </div>
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__qnehu)} />

          <p.Stack
            as={"div"}
            data-plasmic-name={"cta"}
            data-plasmic-override={overrides.cta}
            hasGap={true}
            className={classNames(projectcss.all, sty.cta)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7QKLz
              )}
            >
              {"READY TO START?"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ahIbs
              )}
            >
              {
                "Experience the full power of Coach in action, and see why microlearning is your company’s future."
              }
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ukDK)}
            >
              <p.Stack
                as={"button"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__li9BD
                  )}
                >
                  {"GET STARTED"}
                </div>

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ypfCb)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"15px"}
                  loading={"lazy"}
                  src={{
                    src: buttonCaretWhitesvg2S5Jbv6HmTb,
                    fullWidth: 108,
                    fullHeight: 150,
                    aspectRatio: 0.722222
                  }}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "reusableHeader",
    "section1",
    "copy",
    "ctaBlog2",
    "section11",
    "cta",
    "button",
    "footer"
  ],

  reusableHeader: ["reusableHeader"],
  section1: ["section1", "copy"],
  copy: ["copy"],
  ctaBlog2: ["ctaBlog2", "section11"],
  section11: ["section11"],
  cta: ["cta", "button"],
  button: ["button"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    reusableHeader: makeNodeComponent("reusableHeader"),
    section1: makeNodeComponent("section1"),
    copy: makeNodeComponent("copy"),
    ctaBlog2: makeNodeComponent("ctaBlog2"),
    section11: makeNodeComponent("section11"),
    cta: makeNodeComponent("cta"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "About Us",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
