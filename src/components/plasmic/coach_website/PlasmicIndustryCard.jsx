// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uu5v5CefeBFWJ3g58RuWZW
// Component: lNCO1zQqfc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_coach_website.module.css"; // plasmic-import: uu5v5CefeBFWJ3g58RuWZW/projectcss
import sty from "./PlasmicIndustryCard.module.css"; // plasmic-import: lNCO1zQqfc/css
import iconIndustryConsumersvgPGthreAtx from "./images/iconIndustryConsumersvg.svg"; // plasmic-import: pGthreAtx/picture
import iconIndustryConsumerHoversvgCp4Jr48Dw from "./images/iconIndustryConsumerHoversvg.svg"; // plasmic-import: cp4JR48DW/picture
import iconIndustryManufacturingsvg7B4HyB2Zy from "./images/iconIndustryManufacturingsvg.svg"; // plasmic-import: 7b4hyB2zy/picture
import iconIndustryManufacturingHoversvgRmXy9F9Zy from "./images/iconIndustryManufacturingHoversvg.svg"; // plasmic-import: rmXy9f9zy/picture
import iconIndustryPharmasvg2VPzmcjeuGr from "./images/iconIndustryPharmasvg2.svg"; // plasmic-import: vPzmcjeuGR/picture
import iconIndustryPharmaHoversvgNFyBzNm0X6 from "./images/iconIndustryPharmaHoversvg.svg"; // plasmic-import: NFyBZNm0x6/picture
import iconIndustryTelecomsvgY2ZXgrBo6 from "./images/iconIndustryTelecomsvg.svg"; // plasmic-import: y2Z-XgrBo6/picture
import iconIndustryTelecomHoversvgYTaBxBym6X from "./images/iconIndustryTelecomHoversvg.svg"; // plasmic-import: yTaBxBym6x/picture
import iconIndustryLuxurysvgVcnswNu8W from "./images/iconIndustryLuxurysvg.svg"; // plasmic-import: VCNSWNu8W/picture
import iconIndustryLuxuryHoversvgFvdGeL2Khg from "./images/iconIndustryLuxuryHoversvg.svg"; // plasmic-import: FvdGeL2khg/picture

export const PlasmicIndustryCard__VariantProps = new Array(
  "consumerElectronics",
  "manufacturing",
  "pharmaceuticals",
  "telecom",
  "luxuryGoods"
);

export const PlasmicIndustryCard__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicIndustryCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "consumerElectronics",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.consumerElectronics
          : undefined,
        variableType: "variant"
      },

      {
        path: "manufacturing",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.manufacturing
          : undefined,
        variableType: "variant"
      },

      {
        path: "pharmaceuticals",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.pharmaceuticals
          : undefined,
        variableType: "variant"
      },

      {
        path: "telecom",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.telecom : undefined,
        variableType: "variant"
      },

      {
        path: "luxuryGoods",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.luxuryGoods
          : undefined,
        variableType: "variant"
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);
  const [$queries, setDollarQueries] = React.useState({});
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootconsumerElectronics]: hasVariant(
            $state,
            "consumerElectronics",
            "consumerElectronics"
          ),

          [sty.rootluxuryGoods]: hasVariant(
            $state,
            "luxuryGoods",
            "luxuryGoods"
          ),

          [sty.rootmanufacturing]: hasVariant(
            $state,
            "manufacturing",
            "manufacturing"
          ),

          [sty.rootpharmaceuticals]: hasVariant(
            $state,
            "pharmaceuticals",
            "pharmaceuticals"
          ),

          [sty.roottelecom]: hasVariant($state, "telecom", "telecom")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0KWwZ, {
          [sty.freeBoxconsumerElectronics___0KWwZ8BVqy]: hasVariant(
            $state,
            "consumerElectronics",
            "consumerElectronics"
          ),

          [sty.freeBoxmanufacturing___0KWwZ0Rbxx]: hasVariant(
            $state,
            "manufacturing",
            "manufacturing"
          ),

          [sty.freeBoxtelecom___0KWwZBjBxg]: hasVariant(
            $state,
            "telecom",
            "telecom"
          )
        })}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgconsumerElectronics]: hasVariant(
              $state,
              "consumerElectronics",
              "consumerElectronics"
            ),

            [sty.imgluxuryGoods]: hasVariant(
              $state,
              "luxuryGoods",
              "luxuryGoods"
            ),

            [sty.imgmanufacturing]: hasVariant(
              $state,
              "manufacturing",
              "manufacturing"
            ),

            [sty.imgpharmaceuticals]: hasVariant(
              $state,
              "pharmaceuticals",
              "pharmaceuticals"
            ),

            [sty.imgtelecom]: hasVariant($state, "telecom", "telecom")
          })}
          displayHeight={"70px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"70px"}
          loading={"lazy"}
          src={
            hasVariant($state, "luxuryGoods", "luxuryGoods") &&
            triggers.hover_root
              ? {
                  src: iconIndustryLuxuryHoversvgFvdGeL2Khg,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "telecom", "telecom") && triggers.hover_root
              ? {
                  src: iconIndustryTelecomHoversvgYTaBxBym6X,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals") &&
                triggers.hover_root
              ? {
                  src: iconIndustryPharmaHoversvgNFyBzNm0X6,
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "manufacturing", "manufacturing") &&
                triggers.hover_root
              ? {
                  src: iconIndustryManufacturingHoversvgRmXy9F9Zy,
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant(
                  $state,
                  "consumerElectronics",
                  "consumerElectronics"
                ) && triggers.hover_root
              ? {
                  src: iconIndustryConsumerHoversvgCp4Jr48Dw,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "luxuryGoods", "luxuryGoods")
              ? {
                  src: iconIndustryLuxurysvgVcnswNu8W,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "telecom", "telecom")
              ? {
                  src: iconIndustryTelecomsvgY2ZXgrBo6,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals")
              ? {
                  src: iconIndustryPharmasvg2VPzmcjeuGr,
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "manufacturing", "manufacturing")
              ? {
                  src: iconIndustryManufacturingsvg7B4HyB2Zy,
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "consumerElectronics", "consumerElectronics")
              ? {
                  src: iconIndustryConsumersvgPGthreAtx,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : {
                  src: iconIndustryConsumersvgPGthreAtx,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__cIt9)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textconsumerElectronics]: hasVariant(
                  $state,
                  "consumerElectronics",
                  "consumerElectronics"
                ),

                [sty.textluxuryGoods]: hasVariant(
                  $state,
                  "luxuryGoods",
                  "luxuryGoods"
                ),

                [sty.textmanufacturing]: hasVariant(
                  $state,
                  "manufacturing",
                  "manufacturing"
                ),

                [sty.textpharmaceuticals]: hasVariant(
                  $state,
                  "pharmaceuticals",
                  "pharmaceuticals"
                ),

                [sty.texttelecom]: hasVariant($state, "telecom", "telecom")
              }
            )}
          >
            {hasVariant($state, "luxuryGoods", "luxuryGoods")
              ? "Luxury Goods"
              : hasVariant($state, "telecom", "telecom")
              ? "Telecom"
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals")
              ? "Pharmaceuticals"
              : hasVariant($state, "manufacturing", "manufacturing")
              ? "Manufacturing"
              : hasVariant($state, "consumerElectronics", "consumerElectronics")
              ? "Consumer Electronics"
              : "Industry"}
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "text"],
  img: ["img"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndustryCard__ArgProps,
          internalVariantPropNames: PlasmicIndustryCard__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicIndustryCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndustryCard";
  } else {
    func.displayName = `PlasmicIndustryCard.${nodeName}`;
  }
  return func;
}

export const PlasmicIndustryCard = Object.assign(
  // Top-level PlasmicIndustryCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicIndustryCard
    internalVariantProps: PlasmicIndustryCard__VariantProps,
    internalArgProps: PlasmicIndustryCard__ArgProps
  }
);

export default PlasmicIndustryCard;
/* prettier-ignore-end */
